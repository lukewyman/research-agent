# Dockerfile.api
# --- Stage 1: builder (install deps once; cached by lockfiles) ---
FROM python:3.12-slim AS builder
WORKDIR /app

# System packages for building wheels (add gcc if needed)
RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*

# Install uv
RUN pip install --no-cache-dir uv

# Copy only files that affect dependency resolution (max cache hit)
COPY pyproject.toml uv.lock ./
# Copy subpackage metadata so uv can resolve local packages without full source yet
COPY packages/core/pyproject.toml packages/core/pyproject.toml
COPY packages/rag/pyproject.toml  packages/rag/pyproject.toml
COPY packages/api/pyproject.toml  packages/api/pyproject.toml
COPY packages/tasks/pyproject.toml packages/tasks/pyproject.toml
COPY packages/feeds/pyproject.toml packages/feeds/pyproject.toml
COPY packages/cache/pyproject.toml packages/cache/pyproject.toml

# Create virtualenv and install project deps into it
RUN uv venv /app/.venv
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Sync deps (â€“frozen ensures uv.lock is honored)
RUN uv sync --frozen

# Now bring in full source (this layer will invalidate on code changes only)
COPY . /app
# Optional: re-run uv sync so local packages (editable) are visible
RUN uv sync --frozen

# --- Stage 2: runtime (clean, small) ---
FROM python:3.12-slim AS runtime
WORKDIR /app

# Copy the prebuilt virtualenv and your code
COPY --from=builder /app/.venv /app/.venv
COPY . /app

ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Default command (k8s overrides are fine)
CMD ["uv", "run", "uvicorn", "research_api.app:app", "--host", "0.0.0.0", "--port", "8000"]
